.model small

.stack 100h

.data
    array dw 30 dup(?)
    buff db 7           
    hellostr db "Input array: ", 0Dh, 0Ah, '$'
    errorMsg db "        error, pls try again ",0Dh, 0Ah,'$'
    leftBracket db "[$"
    rightBracket db ']$'
    eq db "=$"
    space db " $"
    minus db "-$"
    newLine db 0Dh, 0Ah, '$'
    row equ 6
    col equ 5
    poz equ col*2
.code

    jmp start
    
    printStr macro outStr
    mov ah, 09h
    mov dx, offset outStr
    int 21h
    endm    
    
    inputNum proc
    push ax
    push bx
    push di 
    
procBegin:        
    xor cx, cx
    mov bx, 10
    mov ah, 0Ah
    mov dx, offset buff
    int 21h
    xor ax, ax
    mov si, offset buff+2
    cmp [si], '-'
    jne m
    inc si    
m:   
    lodsb
    cmp al, 0Dh
    je exit
    cmp al, '0'
    jb error
    cmp al, '9'
    ja error
    sub al, '0'
    mov cl, al
    
m1:    
    lodsb
    cmp al, 0Dh
    je exit
    cmp al, '0'
    jb error
    cmp al, '9'
    ja error
    sub al, '0'
    mov ah, 0
    xchg ax, cx
    mul bx
    jo error
    add ax, cx
    xchg ax, cx
    jmp m1
error:    
    printStr newLine
    printStr errorMsg
    jmp procBegin
    
negative: 
    neg cx
    cmp cx, 8000h
    jbe error
    jmp posit        
    
exit:
    mov si, offset buff+2
    cmp [si], '-'
    je negative
    cmp ch, 7Fh
    ja error   
posit:     
    pop di
    pop bx
    pop ax    
    ret
    inputNum endp
         
         
         
    arrayIndex proc
    pusha
    printStr leftBracket
    mov dl, bh
    add dl, '0'
    mov ah, 2
    int 21h
    printStr rightBracket 
    printStr leftBracket
    mov ah, 2
    mov dl, bl
    add dl, '0'
    int 21h
    printStr rightBracket
    printStr eq
    popa
    ret    
    arrayIndex endp
         
         
         
         
showNum proc
    pusha
    mov bx, 10
    xor cx, cx
    cmp ah, 7Fh
    jbe begin 
    push ax
    printStr minus
    pop ax
    neg ax    
begin:
    xor dx, dx    
    div bx
    add dl, '0'
    push dx
    inc cx
    cmp ax, 0000
    jne begin
outLoop:
    pop dx
    mov ah, 02
    mov al, dl
    int 21h
    loop outLoop    
    popa
    ret
showNum endp

    outArray proc
    pusha 
    mov di, offset array
    xor bx, bx
mainArrLoop:
outArrLoop:
    mov ax, [di]
    call showNum
    printStr space
    add di, 2
    inc bl
    cmp bl, col
    jne outArrLoop
    xor bl, bl
    printStr newLine
    inc bh
    cmp bh, row
    jne mainArrLoop
    popa 
    ret   
    outArray endp
    
sortArrayRows proc
    pusha         
    mov di, offset array 
    mov si, di
    add si, poz
    mov ax, [si]
    xor bx, bx 
    xor cx, cx
loop1:
loop2:
    jmp cmpStr
continue:    
    inc cl
    cmp cl, row-1
    jne loop2
    xor cl, cl
    xor bx, bx
    mov di, offset array 
    mov si, di
    add si, poz
    inc ch
    cmp ch, row-1
    jne loop2
    jmp endSort
        
cmpStr:
    mov ax, [di+bx]
    mov dx, [si+bx]
    cmp ax, dx
    jg swap   
    cmp ax, dx
    jl next
    add bx, 2    
    cmp bx, poz
    jbe cmpStr
    xor bx, bx
    jmp continue

next:
    add di, poz
    add si, poz
    xor bx, bx
    jmp continue
    
swap: 
    mov ax, [si+bx]    
    xchg ax, [di+bx]
    xchg ax, [si][bx]
    add bx, 2
    cmp bx, poz
    jne swap
    jmp next            
endSort:    
    popa
    ret
sortArrayRows endp        
    
start:
    mov ax, @data
    mov ds, ax  
     
    mov ah,9
    mov dx,offset hellostr
	int 21h 
	 
    xor bx, bx
    mov di, offset array
mainLoop:    
inpLoop: 
    call arrayIndex
    call inputNum
    printStr newLine        
    mov [di], cx
    add di, 2 
    inc bl
    cmp bl, col
    jne inpLoop
    xor bl, bl
    inc bh
    cmp bh, row
    jne mainLoop
    
    mov di, offset array
    mov ax, [di]
    call outArray
    printStr newLine 
    call sortArrayRows
    call outArray

    
    
    
    
     
    
    
    
    
    
    
    
    
    
